/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * DevStage API
 * OpenAPI 3.0 documentation for the DevStage API
 * OpenAPI spec version: 1.0
 */
export interface User {
  id?: number
  name?: string
  email?: string
}

export interface Event {
  eventId?: number
  title?: string
  prettyName?: string
  location?: string
  price?: number
  startDate?: string
  endDate?: string
  startTime?: LocalTime
  endTime?: LocalTime
}

export interface LocalTime {
  hour?: number
  minute?: number
  second?: number
  nano?: number
}

export type CreateSubscription200 = { [key: string]: unknown }

export type CreateSubscription404 = { [key: string]: unknown }

export type CreateSubscription409 = { [key: string]: unknown }

export type CreateSubscription1200 = { [key: string]: unknown }

export type CreateSubscription1404 = { [key: string]: unknown }

export type CreateSubscription1409 = { [key: string]: unknown }

export type GenerateRankingByEvent200 = { [key: string]: unknown }

export type GenerateRankingByEvent404 = { [key: string]: unknown }

export type GetUserEventStats200 = { [key: string]: unknown }

export type GetUserEventStats404 = { [key: string]: unknown }

/**
 * @summary Create new subscription
 */
export const getCreateSubscriptionUrl = (prettyName: string) => {
  return `http://localhost:8080/api/v1/subscription/${prettyName}`
}

export const createSubscription = async (
  prettyName: string,
  user: User,
  options?: RequestInit
): Promise<CreateSubscription200> => {
  const res = await fetch(getCreateSubscriptionUrl(prettyName), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(user),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: CreateSubscription200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Create new subscription
 */
export const getCreateSubscription1Url = (
  prettyName: string,
  userId: number
) => {
  return `http://localhost:8080/api/v1/subscription/${prettyName}/${userId}`
}

export const createSubscription1 = async (
  prettyName: string,
  userId: number,
  user: User,
  options?: RequestInit
): Promise<CreateSubscription1200> => {
  const res = await fetch(getCreateSubscription1Url(prettyName, userId), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(user),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: CreateSubscription1200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get all events
 */
export const getGetAllEventsUrl = () => {
  return 'http://localhost:8080/api/v1/events'
}

export const getAllEvents = async (options?: RequestInit): Promise<Event[]> => {
  const res = await fetch(getGetAllEventsUrl(), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: Event[] = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Add new event
 */
export const getAddNewEventUrl = () => {
  return 'http://localhost:8080/api/v1/events'
}

export const addNewEvent = async (
  event: Event,
  options?: RequestInit
): Promise<Event> => {
  const res = await fetch(getAddNewEventUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(event),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: Event = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get event ranking
 */
export const getGenerateRankingByEventUrl = (prettyName: string) => {
  return `http://localhost:8080/api/v1/subscription/${prettyName}/ranking`
}

export const generateRankingByEvent = async (
  prettyName: string,
  options?: RequestInit
): Promise<GenerateRankingByEvent200> => {
  const res = await fetch(getGenerateRankingByEventUrl(prettyName), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GenerateRankingByEvent200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get user event stats
 */
export const getGetUserEventStatsUrl = (prettyName: string, userId: number) => {
  return `http://localhost:8080/api/v1/subscription/${prettyName}/ranking/${userId}`
}

export const getUserEventStats = async (
  prettyName: string,
  userId: number,
  options?: RequestInit
): Promise<GetUserEventStats200> => {
  const res = await fetch(getGetUserEventStatsUrl(prettyName, userId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetUserEventStats200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get event by pretty name
 */
export const getGetEventByPrettyNameUrl = (prettyName: string) => {
  return `http://localhost:8080/api/v1/events/${prettyName}`
}

export const getEventByPrettyName = async (
  prettyName: string,
  options?: RequestInit
): Promise<Event> => {
  const res = await fetch(getGetEventByPrettyNameUrl(prettyName), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: Event = body ? JSON.parse(body) : {}

  return data
}
